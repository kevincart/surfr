{"version":3,"sources":["components/surfrBox.js","components/surfrEmoji.js","pages/index.js","components/surfrNav.js","pages/about.js","serviceWorker.js","index.js","App.js"],"names":["Box","props","children","className","this","React","Component","Emoji","console","log","content","role","aria-label","Index","to","Nav","hamburger","trigram","surfer","title","About","Boolean","window","location","hostname","match","ReactDOM","render","basename","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAkBiBA,E,YAfb,WAAaC,GAAO,IAAD,8BACf,4CAAMA,KACDC,SAAW,EAAKD,MAAMC,SAFZ,E,sEAKjB,OACE,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,qBACTC,KAAKH,MAAMC,e,GATXG,IAAMC,WCcPC,E,YAbb,WAAaN,GAAO,IAAD,6BACf,4CAAMA,IACNO,QAAQC,IAAI,gBAAiB,EAAKR,OAElC,EAAKS,QAAU,EAAKT,MAAMS,QAJX,E,sEAOjB,OACE,0BAAMC,KAAK,MAAMC,aAAW,cAAcT,UAAU,eAAeC,KAAKM,a,GAT5DL,IAAMC,WC4BXO,MAtBf,WACI,OACI,6BACI,4BAAQV,UAAU,eAClB,yBAAKA,UAAU,OACX,kBAAC,EAAD,KACI,uBAAGA,UAAU,YAAb,SAGA,uBAAGA,UAAU,eACT,kBAAC,EAAD,CAAOO,QAAQ,kBAEnB,uEAIJ,kBAAC,IAAD,CAAMI,GAAG,SAASX,UAAU,cAA5B,uBCICY,E,YAxBb,WAAad,GAAO,IAAD,8BACf,4CAAMA,KACDC,SAAW,EAAKD,MAAMC,SAC3BM,QAAQC,IAAI,cAAe,EAAKR,OAEhC,EAAKe,UAAY,eACjB,EAAKC,QAAU,SACf,EAAKC,OAAS,eACd,EAAKC,MAAQ,EAAKlB,MAAMkB,MART,E,sEAWjB,OACE,yBAAKhB,UAAU,kBACb,yBAAKA,UAAU,oBACb,uBAAGA,UAAU,qBACX,kBAAC,EAAD,CAAOO,QAASN,KAAKa,YAGzB,yBAAKd,UAAU,mBAAmBC,KAAKe,Y,GAnB/Bd,IAAMC,WCqBTc,MAjBf,WACI,OACI,yBAAKjB,UAAU,OACX,4BAAQA,UAAU,cAClB,kBAAC,EAAD,CAAKgB,MAAM,gBAEX,kBAAC,EAAD,KACI,6BAAShB,UAAU,eAAnB,8JCFIkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCNNC,IAASC,OACL,kBAAC,IAAD,CAAeC,SAAS,UACpB,mBCRO,WACb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlB,IACjC,kBAAC,IAAD,CAAOiB,KAAK,SAASC,UAAWX,ODI9B,OAEJY,SAASC,eAAe,SDiHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.03589660.chunk.js","sourcesContent":["import React from 'react';\n\nclass Box extends React.Component {\n    constructor (props){\n        super(props);\n        this.children = this.props.children;\n    }\n    render() {\n      return (\n        <div className=\"surfr-box-root\">\n            <div className=\"surfr-box-content\">\n                { this.props.children }\n            </div>\n        </div>\n      );\n    }\n  }\n\n  export default Box;","import React from 'react';\n\nclass Emoji extends React.Component {\n    constructor (props){\n        super(props);\n        console.log('emoji props: ', this.props);\n\n        this.content = this.props.content;\n    }\n    render() {\n      return (\n        <span role=\"img\" aria-label=\"surfr-emoji\" className=\"surfr-emoji\">{this.content}</span>\n      );\n    }\n  }\n\n  export default Emoji;","// React\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\n// Surfr Components\nimport Box from '../components/surfrBox';\nimport Emoji from '../components/surfrEmoji';\n\nfunction Index() {\n    return (\n        <div>\n            <header className=\"App-header\"></header>\n            <div className=\"App\">\n                <Box>\n                    <p className=\"surfr-h1\">\n                        Surfr\n                    </p>\n                    <p className=\"Index-emoji\">\n                        <Emoji content=\"&#127940;\"></Emoji>\n                    </p>\n                    <p>\n                        A cool open-source react design system.\n                    </p>\n                </Box>\n                <Link to=\"/about\" className=\"surfr-link\">Find out more...</Link>\n            </div>\n        </div>\n    );\n}\n\nexport default Index;","import React from 'react';\nimport Emoji from './surfrEmoji';\n\nclass Nav extends React.Component {\n    constructor (props){\n        super(props);\n        this.children = this.props.children;\n        console.log('nav props: ', this.props);\n\n        this.hamburger = \"üçî\";\n        this.trigram = \"‚ò∞\";\n        this.surfer = \"üèÑ\";\n        this.title = this.props.title;\n    }\n    render() {\n      return (\n        <div className=\"surfr-nav-root\">\n          <div className=\"surfr-nav-header\">\n            <p className=\"surfr-nav-trigger\">\n              <Emoji content={this.trigram}></Emoji>\n            </p>\n          </div>\n          <div className=\"surfr-nav-title\">{this.title}</div>\n        </div>\n      );\n    }\n  }\n\n  export default Nav;","// React\nimport React from 'react';\n\n// Surfr Components\nimport Box from '../components/surfrBox';\nimport Nav from '../components/surfrNav';\n\nfunction About() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n            <Nav title=\"About Page\"></Nav>\n            </header>\n            <Box>\n                <article className=\"App-article\">\n                    Surfr is a mobile-first design system made in React.\n                    You should feel free to fork it and use it \n                    as a starter project for learning about design systems.\n                </article>\n            </Box>\n        </div>\n    );\n}\n\nexport default About;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\n// Style imports\nimport './surfr.css';\nimport './_reset.scss';\n\nReactDOM.render(\n    <BrowserRouter basename=\"/surfr\">\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n// We will create these two pages in a moment\nimport Index from './pages/index'\nimport About from './pages/about'\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Index} />\n      <Route path=\"/about\" component={About} />\n    </Switch>\n  )\n}\n"],"sourceRoot":""}